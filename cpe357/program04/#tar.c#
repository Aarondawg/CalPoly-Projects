/* Garrett Milster
 * DJ Mitchel
 *
 * tar does lots of 
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <dirent.h>
#include <grp.h>
#include <pwd.h>

#define MAX_PATH 256
#define BLOCK 512
int build_file(int fd, char *dname, char* tarfile);
int write_file(char *name, int fd, char* tarfile);
char* octal(char* string, int size);


int main(int argc, char* argv[])
{
   int c = 0, t = 0, x = 0, v=0, f=0, S = 0;
   int len, i,fd;
   char *string = malloc(MAX_PATH); 
   char block[BLOCK];

   if(argc < 2)
   {
      printf("Usage: mytar [ctxS[f tarfile]] [ path [ ... ] ]\n");
      return -1;
   }
   len = strlen(argv[1]);
   /* used for keeping track of what switches were used */
   for(i = 0; i < len; i++)
   {
      if(argv[1][i] == 'c')
      {
         c++;
      }
      else if(argv[1][i] == 't')
      {
         t++;
      }
      else if(argv[1][i] == 'x')
      {
         x++;
      }
      else if(argv[1][i] == 'v')
      {
         v++;
      }
      else if(argv[1][i] == 'f')
      {
         f++;
      }
      else if(argv[1][i] == 'S')
      {
         S++;
      }
      else
      {
         printf("Incorrect tar flag used\n");
         return -1;
      }
   }
   if((c + t + x) > 1)
   {
      printf("usage: %s: you may only choose one of the 'ctx' options.\n", argv[2]);
         printf("Usage: mytar [ctxS[f tarfile]] [ path [ ... ] ]\n");
      return -1;  
   }
   
   if(c > 1 || t > 1 || x > 1 || S > 1 || f > 1)
   {
      printf("usage: %s: you may only choose one of the 'ctx' options.\n", argv[2]);
         printf("Usage: mytar [ctxS[f tarfile]] [ path [ ... ] ]\n");
      return -1; 
   }
   if(f == 0)
   {
      printf("Name of archive file is required\n");
      return -1;
   }
   
   if(c == 1)
   {
      if((fd = open(argv[2], O_RDWR|O_TRUNC|O_CREAT, S_IRWXU)) < 0)
      {
         perror("open");
         return -1;
      }
      if(argc > 3)
      {
         for(i = 3; i < argc; i++)
         {
            build_file(fd,argv[i],argv[2]);
         }
      }
      
   }
   else
   {
      if((fd = open(argv[2], O_RDWR|O_TRUNC)) < 0)
      {
         perror("open");
         return -1;
      }
   }
   
   /* writes final two null blocks */
   memset(block, '\0', BLOCK);
   if(write(fd, block, BLOCK) == -1) {
      perror("Write Error\n");
      return -1;
   } 
   if(write(fd, block, BLOCK) == -1) {
      perror("Write Error\n");
      return -1;
   }
   close(fd);
   
   free(string);
   return 0;
}

int build_file(int fd, char *dname, char* tarfile)
{
   DIR *current_location = NULL;
   struct dirent *current;
   char * dot = ".";
   char * dot2 = "..";
   struct stat buff;
   char temp[MAX_PATH];
   int i, len,j, index =0;

   if(lstat(dname, &buff) == -1)
   {
      printf("Incorrect file path\n");
      return -1;
   }
   /* what do we do for links? */
   if(S_ISDIR(buff.st_mode))
   {
      current_location = opendir(dname);
      write_file(dname, fd, tarfile);
      while((current = readdir(current_location)) != NULL)
      {
         index = 0;
         if(strcmp(current->d_name, dot) != 0 && strcmp(current->d_name, dot2) != 0)
         {  
            len = strlen(dname);
            for(i = 0; i < len; i++)
            {
               temp[i] = dname[i];
            }
                 
            if(temp[len -1 ] == '/')
            {
               j = 0;
            }
            else
            {
               temp[len] = '/';
               j = 1;
            }  
            for(i = len +j; i < len + strlen(current->d_name) + 1; i++)
            {
               temp[i] = current->d_name[index];
               index++;
            }       
            temp[i] = '\0';    
            if(build_file(fd, temp, tarfile) == -1)
            {
               printf("build_file error\n");
               return -1;
            }
         }
         /* call function for file */
      }
      if(closedir(current_location) < 0)
      {
         perror("closedir");
         return -1;
      }
   }
   else
   {
      if(write_file(dname, fd, tarfile) < 0)
      {
         printf("write_file error\n");
         return -1;
      }
   }
   return 0;
}


int write_file(char *name, int fd, char* tarfile)
{
   struct stat buff;
   struct passwd * pwp;
   struct group * grp;
   int status, index = 0;
   int len, i, readFD;
   int count = 0;
   char *temp = malloc(32);
   char checksum[8];
   unsigned char block[BLOCK];
   char typeflag;
   char linkname[100];
   memset(block, '\0', BLOCK);

   if(lstat(name, &buff))
   {
      return -1;
   }
   if(S_ISREG(buff.st_mode) == 1)
   {
      status = 0;
      typeflag = '0';
      if(strcmp(tarfile,name) == 0)
      {
         status = -1;
      }
   }
   else if(S_ISDIR(buff.st_mode) == 1)
   {
      status = 1;
      typeflag = '5';
   }
   else if(S_ISLNK(buff.st_mode) == 1)
   {      
      status = 2;
      typeflag = '2';
   }
   else
   {      
      printf("incorrect file type\n");
      status = -1;
   }
      
   if(status >= 0)
   {
      /*puts name in header block */
      len = strlen(name);
      if(len <= 100)
      {            
         for(i = 0; i < len; i++)
         {
            block[i] = name[i];
         }      
      }
      else
      {
         if(len > 255)
         {
            printf("Filename too large\n");
            return -1;
         }
         for(i = 0; i < 100; i++)
         {
            block[i] = name[i];
         }
         index = i;
         i = 345;
         while(name[index]) {
            block[i] = name[index];
            index++;
            i++;
         }
      }

      /* mode */
      memset(temp, '\0', 32);
      index = 100;
      temp = octal(temp, 7);
      i = sprintf(temp,"%o", buff.st_mode);
      for(i = 0; i < 8; i++)
      {
         block[index] = temp[i];
         index++;
      }

      /* uid */
      memset(temp, '\0', 32);
      i = sprintf(temp,"%o", buff.st_uid);
      temp = octal(temp, 7);
      if(temp[0] == '1')
      {
         temp = "7777777";
      }
      for(i = 0; i < 8; i++)
      {

         block[index] = temp[i];
         index++;
      }
      /* gid */
      memset(temp, '\0', 32);      
      i = sprintf(temp,"%o", buff.st_gid);
      temp = octal(temp, 7);
      
      for(i = 0; i < 8; i++)
      {
         block[index] = temp[i];
         index++;
      }
      /* if it's a regular file, put size in, otherwise 0 */
      memset(temp, '\0', 32);
      if(status == 0)
      {
         i = sprintf(temp,"%o", (unsigned int)buff.st_size);
         temp = octal(temp, 11);
         for(i = 0; i < 12; i++)
         {
            block[index] = temp[i];
            index++;
         }
      }
      else
      {
         for(i = 0; i < 12; i++)
         {
            block[index] = 0;
            index++;
         }           
      }
      /* mtime */
      memset(temp, '\0', 32);
      i = sprintf(temp,"%o", (unsigned int)buff.st_mtime);
      temp = octal(temp, 11);
      for(i = 0; i < 12; i++)
      {
         block[index] = temp[i];
         index++;
      }
      /* space for checksum */
      for(i = 0; i < 8; i++)
      {
         block[index] = ' ';
         index++;
      }
      block[index] = typeflag;
      index++;
      /* if symlink, get name and insert it*/
      if(status == 2)
      {
         if((len = readlink(name, linkname, 100)) == -1)
         {
            perror("symlink");
            return -1;
         }
         for(i = 0; i < len; i++)
         {
            block[index] = linkname[i];
            index++;
         }         
      }
      index = 257;
      memset(temp, '\0', 32);
      temp = "ustar";
      /* ustar */
      for(i = 0; i < 5; i++)
      {
         block[index] = temp[i];
         index++;
      }
      block[index] = '\0';
      index++;
      /* inserts 00 for version */
      block[index] = '0';
      index++;
      block[index] = '0';
      index++;
      /* uname */
      if((pwp = getpwuid(buff.st_uid)) == NULL)
      {
         printf("getpwuid error\n");
         return -1;
      }
      i=0;
      while(pwp->pw_name[i] && i < 31)
      {
         block[index] = pwp->pw_name[i];
         i++;
         index++;
      }
      /* gname */
      if((grp = getgrgid(buff.st_gid)) == NULL)
      {
         printf("getgrgid error\n");
         return -1;
      }
      index = 297;
      i = 0;
      while(grp->gr_name[i] && i < 31)
      {
         block[index] = grp->gr_name[i];
         i++;
         index++;
      }
      index = 148;
      for(i = 0; i < BLOCK; i++)
      {
         count = count + block[i];
      }

      i = sprintf(checksum,"%o", (unsigned int)count);

      for(i = 0; i < 8; i++)
      {
         block[index] = checksum[i];
         index++;
      }
      /* write header */
      if(write(fd, block, BLOCK) == -1) {
         printf("Write Error\n");
         return -1;
      }
      
      if(status == 0)
      {
         readFD = open(name, O_RDONLY);         
         /* write regular file */
         memset(block, '\0', BLOCK);
         while((count = read(readFD, block, 512)) > 0)
         {
            if(write(fd, block, count) == -1) {
               perror("Write Header Error\n");
               return -1;
            } 
            memset(block, '\0', BLOCK);
         }
         if(close(readFD))
         {
            return -1;
         }
      }
   }
   return 0;     
}

char* octal(char* string, int size)
{
   int len = strlen(string);
   int diff = size - len;
   int i,j=0;
   char *octalstring = malloc(size);
   for(i = 0; i < diff; i++)
   {
      octalstring[i] = '0';
   }
   for(i = diff; i < size; i++)
   {
      octalstring[i] = string[j];
      j++;
   }
   strcpy(string, octalstring);
   return string;
}