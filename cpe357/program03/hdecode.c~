#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "functions.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

#define CHAR_LEN 257
void print_tree(Node* root);

int main(int argc, char *argv[])
{
   int fd, fd2, count, c;
   int total = 0;
   int num, index = 0;;
   int char_list[CHAR_LEN];
   int int_list[CHAR_LEN];
   int mask = 0x80, shift = 7;
   Node *head;
   Node *ptr;
   
   if(argc == 2)
   {
      fd = open_file(argv[1], 0);
      fd2 = STDOUT_FILENO;
   }
   else if(argc == 3)
   {
      if(argv[1][0] == '-')
      {
         fd = STDIN_FILENO;
         fd2 = open_file(argv[2],1);
      }
      else
      {
         fd = open_file(argv[1], 0);
         fd2 = open_file(argv[2], 1);
      }
   }
   count = read(fd, &c, sizeof(int));
   num = c;
   
      while(count > 0)
      {
         count = read(fd, &c, sizeof(char));
         if(count <= 0)
         {
            break;
         }         
         char_list[index] = (unsigned char)c;
         count = read(fd, &c, sizeof(int)) ;
         int_list[index] = c;
         
         index++;
         total = total + c;
         if(total == num)
            break;   
      }

   bubbleSort(int_list,char_list, index - 1);
   head = build_list(char_list, int_list, index);
   head = build_tree(head);
   
   total = 0;
   ptr = head;

   while((count = read(fd, &c, sizeof(char))) > 0)
   {
      while(shift >= 0)
      {
         mask = (1 << shift);
         
         if(ptr->c != -1)
         {
            
               write(fd2, &(ptr->c),sizeof(char)); 
               ptr = head;
               total++;
               if(total == num)
               {
                  break;
               }
         }
         else
         {
            if((mask & c) > 0)
            {
               ptr = ptr->right;
               
            }
            else
            {
               ptr = ptr->left;               
            }
            
            shift--;
            
         }
      }
      
      if(total == num)
      {
         break;
      }
      shift = 7;
   } 
   
   free_nodes(head);
   close(fd);
   return 0;
}

void print_tree(Node* root)
{
   if(root->c != -1)
   {
      printf("%c\n", root->c);
   }
   if(root->left != NULL)
   {
      print_tree(root->left);
   }
   if(root->right != NULL)
   {
      print_tree(root->right);
   }
}
