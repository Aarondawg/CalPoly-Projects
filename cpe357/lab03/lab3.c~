#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "lab3.h"

#define CHAR_LEN 256

void bubbleSort(int int_list[], char char_list[], int index);
void print_tree(Node *root);

int main(int argc, char *argv[])
{
   typedef struct linkedlist Node;
   char char_list[CHAR_LEN];
   int int_list[CHAR_LEN];
   int i, j, index = 0, count = 0;
   char c;
   FILE *file;
   Node *ptr, *previous, *head, *temp, *next;
   if(argc != 2)
   {
      printf("usage: htable [file]");
         return -1;
   }
   
   file = fopen(argv[1], "r");
   
   for(i = 0; (c = fgetc(file)) != EOF; i++)
   {
      for(j = 0; j <= index; j++)
      {
         
         if(c == char_list[j])
         {
            int_list[j]++;            
            break;
         }
      }

      if(j -1 == index)
      {
         index++;
         char_list[index] = c;
         int_list[index] = 1;   
      }   
      

   }
   
   previous = malloc(sizeof(Node)); /*ERROR CHECK */
   previous->next = NULL;
   previous->c = char_list[0];
   previous->count = int_list[0];
   head = previous;
   
   if(strlen(char_list) > 0)
   {
      for(i = 1; i <= index; i++)
      {
         ptr = malloc(sizeof(Node)); /*ERROR CHECK */
         ptr->next = NULL;
         ptr->c = char_list[i];
         ptr->count = int_list[i];
         previous->next = ptr;
         previous = ptr;
      }
   }

   bubbleSort(int_list, char_list, index);
   ptr = head;

   while(ptr->next != NULL)
   {
      next = ptr->next;
      count = ptr->count + next->count;
      temp = malloc(sizeof(Node));
      temp->count = count;
      temp->left = ptr;
      temp->right = next;
      head = next->next;

      ptr->next = NULL;
      ptr->right = NULL;
      ptr->left = NULL;
      
      next->next = NULL;
      next->right = NULL;
      next->left = NULL;

      ptr = head;
      previous = head;
      while(ptr != NULL)
      {
         if(temp->count <= ptr->count)
         {
            if(ptr == head)
            {
               temp = head->next;
               head = temp;
               break;
            }
            previous->next = temp;
            temp->next = ptr;
            break;
         }
         previous = ptr;
         ptr = ptr->next;
      }
      ptr = head;
   }  

   for(i = 0; i <= index; i++)
   {
      printf("%c_%d_%d\n", char_list[i],i, int_list[i]);
   } 

   return 0;
   
}


void bubbleSort(int int_list[], char char_list[], int index)
{
  int i, j, temp;
  for (i = index; i >= 0; i--)
  {
    for (j = 1; j <= i; j++)
    {
      if (int_list[j-1] > int_list[j])
      {
        temp = int_list[j-1];
        int_list[j-1] = int_list[j];
        int_list[j] = temp;
        
        temp = char_list[j-1];
        char_list[j-1] = char_list[j];
        char_list[j] = temp;
      }
    }
  }
}

void print_tree(Node *root)
{
   if(root != NULL)
   {
      printf("%d\n", root->count);
   }
   if(root->left != NULL)
   {
      print_tree(root->left);
   }
   if(root->right != NULL)
   {
      print_tree(root->right);
   } 
}

