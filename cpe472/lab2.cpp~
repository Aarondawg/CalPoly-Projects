/*
 *  Lab exercise 2.0 
 *  CPE 471, Computer Graphics
 *  Copyright 2005 Chris Buckalew
 *
 *--------------------------------------------------------------
 *  This code contains one OpenGL primitive.  Use this and 
 *  other primitives (including from last lab) to build a scene.  
 *  Rearrange and add to this scene to make a final scene
 *  that contains: 
 *  1) at the far left, a tall thin yellow cone, 
 *  2) in the middle, a short wide red teapot,
 *  3) at the right, a rather small cyan sphere
 *  4) above the middle, a green box that's 2x3x5,
 *  5) below the middle, a blue pyramid that's 5 units high
 *  6) off to the side, a magenta wireframe torus
 *
 *  You will likely need to look up GLUT documentation (GL
 *  Utility Library) - just google "glut documentation".  
 *  This is the information you need for parameters to the 
 *  different shape function calls.
 *
 *  You will need to use transforms to move objects around.
 *  The three types available are Translate (moves things 
 *  around), Scale (bigger or smaller), and Rotate.  
 *  Experiment with these transformations to see basically 
 *  how they work.
 *  
 *------------------------------------------------------------*/
 
#ifdef __APPLE__
#include "GLUT/glut.h"
#include <OPENGL/gl.h>
#endif
#ifdef __unix__
#include <GL/glut.h>
#endif

#include <stdlib.h>
#include <stdio.h>
//#include "GLSL_helper.h"
#include <math.h>

// some function prototypes
void display(void);
void normalize(float[3]);
void normCrossProd(float[3], float[3], float[3]);

// initial viewer position
static GLdouble modelTrans[] = {0.0, 0.0, -5.0};
// initial model angle
static GLfloat theta[] = {0.0, 0.0, 0.0};
static float thetaIncr = 5.0;

// animation transform variables
static GLdouble translate[3] = {-10.0, 0.0, 0.0};

//---------------------------------------------------------
//   Set up the view

void setUpView() {
   // this code initializes the viewing transform
   glLoadIdentity();

   // moves viewer along coordinate axes
   gluLookAt(0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

   // move the view back some relative to viewer[] position
   glTranslatef(0.0f,0.0f, -8.0f);

   // rotates view
   glRotatef(0, 1.0, 0.0, 0.0);
   glRotatef(0, 0.0, 1.0, 0.0);
   glRotatef(0, 0.0, 0.0, 1.0);

   return;
}

//----------------------------------------------------------
//  Set up model transform

void setUpModelTransform() {

   // moves model along coordinate axes
   glTranslatef(modelTrans[0], modelTrans[1], modelTrans[2]);

   // rotates model
   glRotatef(theta[0], 1.0, 0.0, 0.0);
   glRotatef(theta[1], 0.0, 1.0, 0.0);
   glRotatef(theta[2], 0.0, 0.0, 1.0);


}

//----------------------------------------------------------
//  Set up the light

void setUpLight() {
   // set up the light sources for the scene
   // a directional light source from directly behind
   GLfloat lightDir1[] = {5.0, 0.0, 10.0, 0.0};
   GLfloat lightDir2[] = {0.0, -5.0, 10.0, 0.0};
   GLfloat diffuseComp[] = {1.0, 1.0, 1.0, 1.0};

   glEnable(GL_LIGHTING);
   glEnable(GL_LIGHT0);
   glEnable(GL_LIGHT1);

   glLightfv(GL_LIGHT0, GL_POSITION, lightDir1);
   glLightfv(GL_LIGHT1, GL_POSITION, lightDir2);
   glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuseComp);
   glLightfv(GL_LIGHT1, GL_DIFFUSE, diffuseComp);

   return;
}

//--------------------------------------------------------
//  Set up the objects

void drawCone() {

   // save the transformation state
   glPushMatrix();

   // set the material
   GLfloat diffuseColor[] = {4.0, 4.0, 0.0, 1.0};
   glMaterialfv(GL_FRONT, GL_DIFFUSE, diffuseColor);

   // locate it in the scene
   glMatrixMode(GL_MODELVIEW);
   // Adjust the translate and rotation to make the cone the right
   //    shape and in the right place
   glTranslatef(0, 0, 0);	 // x, y, and z
   glRotatef(-90, 1, 0, 0);  // angle and axis (x, y, z components)

   // draw the cone - parameters are bottom radius, height, and number
   // of slices horizontally and radially
   glutSolidCone(2.0, 5.0, 4, 0);

   // recover the transform state
   glPopMatrix();

   return;
}

void drawTeapot() {
   glPushMatrix();
   
   // set the material
   GLfloat diffuseColor[] = {0.2, 0.4, 0.3, 1.0};
   glMaterialfv(GL_FRONT, GL_DIFFUSE, diffuseColor);

   // locate it in the scene
   glMatrixMode(GL_MODELVIEW);
   // Adjust the translate and rotation to make the cone the right
   //    shape and in the right place
   glTranslatef(7, 6, 0);	 // x, y, and z
   glTranslatef(0, -1.5, 0);	 // x, y, and z
   glRotatef(-12, 0, 0, 1);  // angle and axis (x, y, z components)
   glScalef(1.0, 1.0, 1.0);
   //glRotatef(-90, 1, 0, 0);  // angle and axis (x, y, z components)
   // draw the cone - parameters are bottom radius, height, and number
   // of slices horizontally and radially
   glutSolidTeapot(1.0);
   
   glPopMatrix();
   return;
}

void drawSphere() {
   glPushMatrix();
   
   GLfloat diffuseColor[] = {1.0, 0.0, 0.0, 1.0};
   glMaterialfv(GL_FRONT, GL_DIFFUSE, diffuseColor);
   
   glMatrixMode(GL_MODELVIEW);
   
   glTranslatef(-7.0, 6, 0.0);
   glTranslatef(1.0, 1.5, 0.0);
   glutSolidSphere(1, 10, 10);
   
   glPopMatrix();
   return;
}

void drawBox() {
   glPushMatrix();
   
   GLfloat diffuseColor[] = {0.0, 0.0, 1.0, 1.0};
   glMaterialfv(GL_FRONT, GL_DIFFUSE, diffuseColor);
   
   glMatrixMode(GL_MODELVIEW);
   
   glTranslatef(0.0, 5.0, 0.0);
   glRotatef(-90, 1, 0, 0);  // angle and axis (x, y, z components)   
   glRotatef(12, 0, 1, 0);  // angle and axis (x, y, z components)
   glScalef(14.0, 3.0, 0.5);
   glutSolidCube(1.0);
   
   glPopMatrix();
   return;
}

void drawPyramid() {
   glPushMatrix();
   
   GLfloat diffuseColor[] = {3.0, 0.0, 0.0, 1.0};
   glMaterialfv(GL_FRONT, GL_DIFFUSE, diffuseColor);
   
   glMatrixMode(GL_MODELVIEW);
   
   glTranslatef(0.0, 0.0, 0.0);
   

   GLfloat pyramidVerts[] = {
      0, 5, 0,   -1, 0, 1,   1, 0, 1,
      1, 0, -1,   -1, 0, -1
   };   
   
   glBegin(GL_TRIANGLE_FAN);
   
     for (int i = 0; i < 5; i++)
     {
        glVertex3fv(pyramidVerts + i*3);
     }
     glVertex3fv(pyramidVerts + 3);
        
   glEnd();
   
   glMaterialfv(GL_BACK, GL_DIFFUSE, diffuseColor);
   
   glBegin(GL_QUADS);
   
      glVertex3fv(pyramidVerts + 4*3);
      glVertex3fv(pyramidVerts + 3*3);
      glVertex3fv(pyramidVerts + 2*3);
      glVertex3fv(pyramidVerts + 1*3);
      
   glEnd();
   
   glPopMatrix();
   return;
}

void drawTorus() {
   glPushMatrix();
   
   // set the material
   GLfloat diffuseColor[] = {1.0, 0.0, 5.0, 1.0};
   glMaterialfv(GL_FRONT, GL_DIFFUSE, diffuseColor);

   // locate it in the scene
   glMatrixMode(GL_MODELVIEW);
   // Adjust the translate and rotation to make the cone the right
   //    shape and in the right place
   glTranslatef(10, -5, 0);	 // x, y, and z
   glRotatef(-90, 1, 0, 0);  // angle and axis (x, y, z components)
   // draw the cone - parameters are bottom radius, height, and number
   // of slices horizontally and radially
   glutWireTorus(1.0, 4.0, 10, 10);
   
   glPopMatrix();
   return;
}

//-----------------------------------------------------------
//  Callback functions

void reshapeCallback(int w, int h) {
   // from Angel, p.562

   glViewport(0,0,w,h);

   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   if (w < h) {
      glFrustum(-2.0, 2.0, -2.0*(GLfloat) h / (GLfloat) w,
                2.0*(GLfloat) h / (GLfloat) w, 2.0, 200.0);
   }
   else {
      glFrustum(-2.0, 2.0, -2.0*(GLfloat) w / (GLfloat) h,
                2.0*(GLfloat) w / (GLfloat) h, 2.0, 200.0);
   }

   glMatrixMode(GL_MODELVIEW);
}

void mouseCallback(int button, int state, int x, int y) {
   // rotate camera
   GLint axis = 3;
   if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) axis = 0;
   if (button == GLUT_MIDDLE_BUTTON && state == GLUT_DOWN) axis = 1;
   if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN) axis = 2;
   if (axis < 3) {  // button ups won't change axis value from 3
      theta[axis] += thetaIncr;
      if (theta[axis] > 360.0) theta[axis] -= 360.0;
      display();
   }
}   

void keyCallback(unsigned char key, int x, int y) {
   // move viewer with x, y, and z keys
   // capital moves in + direction, lower-case - direction
   if (key == 'x') modelTrans[0] -= 1.0;
   if (key == 'X') modelTrans[0] += 1.0;
   if (key == 'y') modelTrans[1] -= 1.0;
   if (key == 'Y') modelTrans[1] += 1.0;
   if (key == 'z') modelTrans[2] -= 1.0;
   if (key == 'Z') modelTrans[2] += 1.0;
   if (key == 'r') {
      theta[0] = 0.0; theta[1] = 0.0; theta[2] = 0.0;
   }
   if (key == '-') {
      thetaIncr = -thetaIncr;
   }
   if (key == '+') {
      if (thetaIncr < 0) thetaIncr = thetaIncr - 1.0;
      else               thetaIncr = thetaIncr + 1.0;
   }
   display();
}


//---------------------------------------------------------
//  Main routines

void display (void) {
   // this code executes whenever the window is redrawn (when opened,
   //   moved, resized, etc.
   glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

   // set the viewing transform
   setUpView();

   // set up light source
   setUpLight();

   // start drawing objects
   setUpModelTransform();
   drawBox();
   drawCone();
   drawTeapot();
   drawSphere();
   

   glutSwapBuffers();
}

// create a double buffered 500x500 pixel color window
int main(int argc, char* argv[]) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("Building a Scene: Lab 2");
	glEnable(GL_DEPTH_TEST);
	glutDisplayFunc(display);
   glutReshapeFunc(reshapeCallback);
   glutKeyboardFunc(keyCallback);
   glutMouseFunc(mouseCallback);
	glutMainLoop();
	return 0;
}

//---------------------------------------------------------
//  Utility functions

void normalize(float v[3]) {
   // normalize v[] and return the result in v[]
   // from OpenGL Programming Guide, p. 58
   GLfloat d = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
   if (d == 0.0) {
      printf("zero length vector");
      return;
   }
   v[0] = v[0]/d; v[1] = v[1]/d; v[2] = v[2]/d;
}

void normCrossProd(float v1[3], float v2[3], float out[3]) {
   // cross v1[] and v2[] and return the result in out[]
   // from OpenGL Programming Guide, p. 58
   out[0] = v1[1]*v2[2] - v1[2]*v2[1];
   out[1] = v1[2]*v2[0] - v1[0]*v2[2];
   out[2] = v1[0]*v2[1] - v1[1]*v2[0];
   normalize(out);
}


